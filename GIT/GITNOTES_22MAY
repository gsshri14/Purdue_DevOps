Hello everyone!
***********
Trainer: Sonal Mittal
***********

Recap:

Git add & commit workflow to LR

Git modify workflow to LR

Git delete workflow

.gitignore

github remote repo Creation

Personal Access token creation

git push workflow


Agenda:

**************

> git branch & merging

> git rebase

> git pull & fetch workflow

> git conflicts

> git stashing

> git tags


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



GITHUB pull workflow
********************

Create a File in github

> on Github ==> click on Add file button ==> create a new file 

give a name to the file==> add content ==> commit the file

Now pull the file to your local repo

$ git pull origin master

pull ==> fetch changes & commit + merge them to LR & working directory


GITHUB Fetch workflow
***********************

Just check(Read only) are there any new commits on the remote master branch that are not in my local


  $ git fetch origin master

it will fetch commits ==> metadata  but will not merge with your LR or WD

$ git checkout origin/master -m /path/to/file



Conflicts and reolve conflicts:

***************************

1. Create file in remote repo-- replicating file contributed by MARC

  Name of file : login
   

  made chnages to it & commited in to remote repo


2. go to LR

create a file --> login  add some chnages 

git add .

git commit -m "done on LR"

3. Push your chnages to remote


$ git push origin master


  your push will be REJECTED as there are changes on remote in same file


4. pull the changes from remote

 $ git pull origin master


  You get Merge Conflicts


5. Resolve the conflicts and commit the changes

  manually resolve the conflicts


 vim login

 remove the special charcters like HEAD , ===, commit at the end

save the file

 do a commit to complete the merge

 $ git commit -a -m "done merging"


Branching & Merging:

***********************

Command to check different branhces on your repo


$ git branch



2. Create a new branch:


  git branch <nameofbranch>

  git branch b1   ==> create a new branch for you

  git branch

3. Switch to the b1 branch

  $ git checkout b1

4. Create commit on the f1 branch

    touch feature1
    git add .
    git commit -m "on f1 branch"

5. Switch back to Master branch


   $ git checkout master

6. Merge the feature branch chnages to master branch


   $ git merge <feature branch> <masterbranch>

$ git branch -d f1

7. Command to create a branch and switch to the branch


  $ git checkout -b dev

8. Switch to Master branch


  $ git checkout master


9. then sleect only 1 commit and merge the chnages to master


 $ git cherry-pick commitid1 commitid1 commitid1

lets delete the branch with certain commits that are not merged

$ git branch -D dev


10 Create a branch on local and push the branch to remote




11. Merging will happen remote with reviewers assigned



12. Create a branch on remote repo to add collabrators to remote repo


git cherryPick
********


it is command which can merge specific commits to your destination branch

$ git checkout master ==> switch to the branch where we want to the merge
$ git cherry-pick <commitid> ==> only that particulr chnages will be merged to the master branch






Scenario 1: Git Clone



Scenario 2: SSH passwordless authentication

Passwordless Authentication with GIT and GITHUB using SSH
*******************************

Authorization:
Connect your local machine with our github account using SSH:

$ ssh-keygen
[Press enter 3 times]

$ cat ~/.ssh/id_rsa.pub
[COPY THE PUBLIC KEY]

Go to github → username on left top
Click on Settings →Click on SSH & GPG keys option
Click on New key button
Copy paste the public key and save the changes

Push your local repo to remote repo:
$ git push -u origin main




Scenario 3: Forking
*****************
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


Step 1:

fork Sonal0409/quarks-learning-react, so you can send a pull request.

Step 2:

Clone the repo in to local

Step 3:

Create a new branch for changes 

step 4:

push the chnages to the remote repo --> sonal0409 repo


Step 5: Merge your changes from your github repo to Vishal git hub repo

Raise a github pull request



Scenario 5: rebasing
**************

git checkout feature_branch
git rebase master

Scenario 6: GIT TAGS
**************

git tag v1.1

git log --oneline

git tag -m "feb release" -a v1.0.1 <commitid>

git tag --list

git show <tagname>



Scenario 7: git workflows
****************

GIT FLOW:
***********

Install

ubuntu : apt-get update

$ apt-get install gitflow


Centos: 

yum update

yum install gitflow


Amazon linux:

amazon-linux-extras install epel

yum install gitflow


every command with tool gitflow

3 types of branches

 > feature
 > release
 > hotfix

> git flow init

 > create a local repo
   > .git folder

 > 2 branches

   > main --> official release branch
   > develop --> which serves as an integration branch for features

 > Create a feature branch

   $ git flow feature start login

  $ git flow feature finish login

> Create a release branch

   $ git flow release start 0.1.0

  $ git flow release finish login

> Create a hotfix branch


  $ $ git flow hotfix start hotfix0.1.0

   $ git flow hotfix finish hotfix0.1.0

















































































































































































